Overview

Purpose

The Claiming Module enables providers to group eligible transactions into formal claims that can be submitted to the government for payment approval.
This feature creates the bridge between Haven’s internal transaction ledger and the external funding agencies’ reimbursement process.

Problem Statement

Haven currently generates and tracks transactions and spend, but there is no structured way to actually claim and get paid.
Providers must manually extract transactions and prepare separate claim files for government systems. This is time-consuming, error-prone, and leaves no system of record for what has been claimed or paid.

Phase 1 introduces the core claiming logic, allowing users to:

1. search, group, select and group transactions,
2. generate a claim container which is a big claim or bulk claim
3. Manage transactions in the system  by moving those transactions through clear status transitions (draft → picked up → submitted, error, success, paid), and
4. tie transactions to claims and therefore to a unique claim record for future checking, auditting and evidencing

2. Goals & Non-Goals

Goals

Create a Claiming Module under the Haven > Claims section.
Support manual and bulk creation of claim containers.
Move eligible transactions from draft to picked_up state.
Associate one or many transactions with a unique claim ID (e.g., CLM-0000001).
reflect this relationship back on the transaction also
Display claims and their linked transactions in a clear, auditable UI.

Non-Goals (Phase 1)

No integration yet with external government APIs (NDIA, PACE, etc.).
No payment-status feedback handling (to come in Phase 2).

Audience / Users

Finance admins / claims officers responsible for submitting funding claims.
Operational admins who review transaction readiness prior to claiming.
All users share equal permissions in this initial release.

In Scope (Phase 1)

Create a new Claims section with the ability to:
Create a claim 
When creating a claim, choose filters (customer, date range, or all eligible transactions).
Generate a claim record and associate transactions. This claims record details this event and has some psecifics.
Transition transaction states (draft → picked_up).
Display claims and linked transactions in the UI.
Add backend logic to assign a unique claim ID (CLM-######).

Out of Scope (Phase 1)

Government API submission or response handling.
Payment reconciliation (status paid / rejected).

User Experience (UX)

Navigation: Main menu → Claims

Flow — Create Claim

1️⃣ User clicks “Create Claim” (or “Create Bulk Claim”).
2️⃣ Modal opens with filters:

Resident (optional select box)

Date range picker

“Include all valid transactions” toggle
3️⃣ User clicks Create Claim.
4️⃣ System queries transactions matching filters where status = draft.
5️⃣ All matching transactions are:

Grouped under a new Claim record (claims table).

Assigned a unique Claim ID (CLM-0000001).

Updated to status = picked_up and claim_id = CLM-0000001.
6️⃣ Success toast: “Claim CLM-0000001 created with 50 transactions.”
7️⃣ User can click into the claim to view its transactions.

Claim Detail View

Header: Claim ID, Created By, Date Created, Transaction Date Range.

Table: List of transactions linked to the claim.
  - Transaction ID (clickable link to transactions page with search)
  - Resident name
  - Date
  - Service code
  - Amount
  - Note

Buttons (Future phase): Export

Transaction Detail Modal

When viewing a transaction, the following information is displayed:
  - Transaction ID
  - Status (with color-coded pill)
  - Claim ID (clickable link to claim detail page)
    - Shows "Not claimed" for draft transactions
    - Shows claim ID as clickable link for picked_up/submitted/paid/rejected transactions
  - Resident, House, Service Code, Date of Delivery, etc.

Functional Requirements
ID	Function	Description	Acceptance Criteria
F-1	Create Claim	Create new claim record and associate transactions	Unique Claim ID assigned; transactions linked
F-2	Filter transactions	Filter eligible transactions by resident or date range	Only draft transactions included
F-3	State transition	Change transaction status from draft → picked_up	Status visible in UI and DB
F-4	View claim details	Show transactions linked to a claim	List view loads ≤ 2 s
F-5	Audit log	Record user ID who created claim and time stamp	Visible in claims.created_by
F-6	Reversal logic (future)	Unlink transactions if claim deleted	Not Phase 1 but flag design consideration

Technical Requirements
Database

New Table: claims

Field	Type	Notes
id	uuid	Primary key
claim_number	text	Human-readable ID (CLM-0000001)
organisation_id	uuid	Org scope
created_by	uuid	User who created claim
created_at	timestamptz	Timestamp
filters_json	jsonb	Stores selected parameters (date range, resident id etc.)
transaction_count	integer	# transactions included
status	enum (draft, in_progress, submitted, paid, rejected)	Phase 1 → draft, Uplift A → in_progress

Update Existing Table: transactions
Add fields:

claim_id (uuid, nullable) - Links transaction to its parent claim
  - NULL for draft transactions (not yet claimed)
  - Populated when transaction status changes to picked_up
  - Prevents transaction from being picked up by another claim
  - Displayed in transaction detail modal as clickable link to claim

status enum (draft, picked_up, submitted, paid, rejected)
  - draft: Transaction created but not yet claimed
  - picked_up: Transaction associated with a claim
  - submitted: Claim has been submitted to government
  - paid: Payment received from government
  - rejected: Claim rejected by government

Metrics / Success Criteria

Claim creation completes ≤ 5 seconds for up to 500 transactions.

100 % of transactions linked to claim have status = picked_up.

Claim number uniqueness guaranteed across organisation.

Audit logs capture created_by and timestamp.

Risks & Mitigations
Risk	Impact	Mitigation
Partial update (error mid-batch)	High	Wrap in atomic transaction / rollback on failure
Duplicate claims on same transactions	High	Lock transactions during claim generation
Performance for large bulk claims	Medium	Batch processing / async worker
Future state expansion complexity	Low	Use enum with forward-compatible values
Human error in filters	Low	Show confirmation summary before claim creation

Future Enhancements in Phase 2

Claim-file generation for NDIA uploads (XML or CSV).
Integration with PACE / NDIA APIs for submission and response parsing.
Auto-reconciliation of payments (paid/rejected).
Multi-organisation claim number series.
Claim validation (pre-submission rules).
Notifications for claim status changes.



** Uplift A ****

Extend the Claiming Module to support the first export pathway for submitting claims externally.
While the current implementation creates and stores claims (as containers of transactions), Uplift A introduces the ability to generate a downloadable claim file (CSV) for submission to third-party or government payment systems.

This establishes the foundation for two future outbound pathways:

 - Downloadable file (CSV) — Phase 1.5 (this uplift)
 - API integration — Phase 2 (future)

 Overview

When a claim is created, it already:

has its own unique claim ID (e.g. CLM-0000001),
is tied to an organisation (although we will deeper into muti tennancy later)
contains metadata (creator, date range, filters), and
holds one or more linked transactions.

This uplift adds a new action on each Claim Detail Page:

Button: “Create Claim File”
When triggered, the system compiles all transactions belonging to that claim and outputs a CSV file in a pre-defined schema.
This csv is attached as a record against the claim itself.

CSV File Structure (Draft)

Each row represents a single transaction within the claim.

Column	Description	Source

Claim ID	The parent claim number (e.g., CLM-0000001)	claims.claim_number
Transaction ID	Unique transaction identifier	transactions.id
Resident Name	Full name of the resident	Joined via resident_id
Contract ID	Related funding contract	transactions.contract_id
Service Date	The date the service was delivered	transactions.occurred_at
Amount	The transaction value (AUD)	transactions.amount
Description	Description of service or item	transactions.note
Status	Transaction status at export	transactions.status
Organisation ID	Org that owns the claim (placeholder for now)	claims.organisation_id (NULL)
Exported At	Timestamp of when file was generated	System timestamp

File name convention:
HAVEN-CLAIM-[claim_number]-[YYYYMMDD-HHmm].csv
Example: HAVEN-CLAIM-CLM-0000001-20251014-1030.csv

Workflow

1️⃣ User opens a claim record (status = draft).
2️⃣ Clicks "Create Claim File" button (in header next to status badge).
3️⃣ System validates:
   - Claim contains transactions
   - ALL transactions have status = picked_up (if any are submitted/paid/rejected, show error)
4️⃣ System compiles all transactions into CSV format.
5️⃣ System writes file to Supabase Storage under:
   /exports/claims/[claim_number]/HAVEN-CLAIM-[claim_number]-[YYYYMMDD-HHmm].csv
6️⃣ Claim status updated from draft → in_progress
7️⃣ Toast: "Claim file created successfully."
8️⃣ File is downloadable immediately via signed URL.
9️⃣ Claim record is updated with:
   - file_path (string) - path to latest generated file
   - file_generated_at (timestamp) - when file was last generated
   - file_generated_by (user_id) - who generated the file

Note: Re-generating creates a new timestamped file version. Previous versions remain in storage.

Functional Requirements
ID	Function	Description	Acceptance Criteria
U-1	Generate claim file	Export all transactions in a claim to CSV	CSV stored in Supabase + downloadable
U-2	File metadata	Store file path and timestamp on claim record	Data persists for audit
U-3	Validate claim	Prevent export if no transactions or invalid state	Error toast shown
U-4	Download file	Generate signed URL for 15-minute access	User can open/download file
U-5	Naming standard	File name uses claim number + timestamp	Matches pattern
U-6	Audit logging	Record user ID and event (“claim_file_generated”)



Phase 2 

adds the ability to import official claim-response files (received externally from the funding body) 
back into Haven.These response files contain the outcome of each transaction submitted in a claim — which ones were paid, partially paid, or rejected
 — and update Haven’s internal records accordingly.

 Problem Statement

After submitting claim files externally, there’s currently no automated or structured way to bring results back into Haven. Users must manually track which transactions were approved or denied. This breaks the financial audit chain and makes reporting unreliable.
This enhancement introduces a manual response upload flow that:

 - accepts a government-formatted results file (CSV / XML / NDIA PACE export),
 - parses outcomes per transaction,
 - updates each transaction’s and claim’s status, and
 - provides clear feedback and error reporting to the user.

 Goals & Non-Goals
Goals

* Enable manual upload of a claim-response file to reconcile claim outcomes.
* Automatically update both the claim and its linked transactions to the new statuses (paid, error, rejected, etc.).
* Provide a summary of updates after upload (success count, error count).
* Maintain a full audit trail of the reconciliation event.
* Store the upload file, and log everything!

Non-Goals (Phase 2)

* No automated API integration with NDIA / PACE yet.
* No financial remittance reconciliation yet!
* No partial-payment handling (whole-transaction outcome only).

Audience / Users

Finance admins / claims officers who handle NDIA claim uploads and responses.
Operational admins who need visibility into claim outcomes.

Scope
In Scope

 - New “Upload Response” action on each claim record.
 - Parsing of response file (CSV or XML).
 - Updating statuses for claim and linked transactions.
 - Upload summary view — counts of success, error, and skipped transactions.
 - Logging the upload event (uploaded_by, timestamp).

User Experience (UX)
Flow: Reconcile Claim

1️⃣ User opens a claim (e.g. CLM-0000001).
2️⃣ Clicks “Upload Response” button.
3️⃣ Upload modal appears:
– Drag and drop CSV / XML file or upload from PC
– Format preview and mapping validation
4️⃣ User clicks Upload & Process.
5️⃣ System parses file, matches records by transaction ID or external reference.
6️⃣ Each transaction’s status is updated based on the response:

success → transaction approved
rejected or error → transaction denied for some reason

If unmatched → left as picked_up with warning
7️⃣ Claim status auto-updates based on aggregate results:



Any rejected → Claim status = partially_paid or error
8️⃣ Completion toast: “Response processed: 47 paid, 3 errors.”
9️⃣ Summary table appears in Claim Detail view with import metadata.

8️⃣ Completion toast: “Response processed: 47 paid, 3 errors.”
9️⃣ Summary table appears in Claim Detail view with import metadata.


Functional Requirements
ID	Function	Description	Acceptance Criteria
F-1	Upload Response File	Allow user to upload CSV/XML response	File validated and parsed successfully
F-2	Match records	Match each line to a transaction by ID	≥ 95 % match rate
F-3	Update transaction status	Set status based on response code	All matched records updated
F-4	Update claim status	Derive overall claim status	Correct aggregate status displayed
F-5	Upload summary	Show totals of success/error/skipped	Displayed after processing
F-6	Audit logging	Record who uploaded and when	Logged in claim_reconciliations table

Technical Requirements
Database Additions

Table: claim_reconciliations

Field	Type	Notes
id	uuid	Primary key
claim_id	uuid	FK to claims
uploaded_by	uuid	User ID
file_name	text	Original filename
results_json	jsonb	Aggregated counts (summary + errors)
created_at	timestamptz	Upload timestamp

Updates to transactions table:
Add enum values paid, rejected, error.

Updates to claims table:
Add enum values partially_paid, paid, error.

Backend Logic

API route POST /api/claims/:id/upload-response

Validate file type (CSV/XML).

Parse and match by transaction_id.

Batch update transactions.

Recalculate claim status.

Insert audit row in claim_reconciliations.

Frontend

Upload modal component.

Progress bar + success/error summary.

Claim detail tab showing history of reconciliations.

Metrics / Success Criteria

100 % claim uploads complete without data loss.

All transactions within a claim reflect correct status after upload.

Audit entry created for every upload.

File processing < 10 seconds for ≤ 1,000 records.